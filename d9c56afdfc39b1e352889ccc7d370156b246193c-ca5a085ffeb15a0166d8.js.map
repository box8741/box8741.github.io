{"version":3,"file":"d9c56afdfc39b1e352889ccc7d370156b246193c-ca5a085ffeb15a0166d8.js","mappings":"yMASA,IAAMA,GAAK,sQAaLC,GAAkB,OAAOC,EAAAA,GAAP,sBAAH,iJAUTF,EAVS,gCAefG,GAAiB,OAAOC,EAAAA,EAAP,sBAAH,+EAQdC,GAAe,qHAOfC,GAAI,wGAMJC,GAAQ,2HAORC,GAAY,6KAUZC,GAAO,iQAwCb,EA3BmD,SAAC,GAS7C,IARLC,EAQI,EARJA,MACAC,EAOI,EAPJA,KACAC,EAMI,EANJA,WACAC,EAKI,EALJA,QAEqBC,EAGjB,EAJJC,UACEC,gBAAmBF,gBAErBG,EACI,EADJA,KAEA,OACE,QAAChB,EAAD,CAAiBiB,GAAID,IACnB,QAACd,EAAD,CAAgBgB,MAAOL,EAAiBM,IAAI,qBAC5C,QAACf,EAAD,MACE,QAACL,EAAD,KAAQU,IACR,QAAC,EAAD,KAAOC,IACP,QAACJ,EAAD,KACGK,EAAWS,KAAI,SAAAC,GAAQ,OACtB,QAACd,EAAD,CAAce,IAAKD,GAAWA,QAGlC,QAACb,EAAD,KAAUI,MCvDlB,EA5C0B,SAACW,EAA0BC,GACnD,IAAMC,GAAwDC,EAAAA,EAAAA,QAAuB,MAC/EC,GAA0DD,EAAAA,EAAAA,QAA6B,MAE7F,GAA0BE,EAAAA,EAAAA,UAAiB,GAApCC,EAAP,KAAcC,EAAd,KAEMC,GAAqBC,EAAAA,EAAAA,UACzB,kBACER,EAAMS,QACJ,gBAEmBtB,EAFnB,EACEuB,KACEC,YAAexB,WAFnB,MAI4B,QAArBY,GAA6BZ,EAAWyB,SAASb,QAE5D,CAACA,IA0BH,OAvBAc,EAAAA,EAAAA,YAAU,WACRV,EAASW,QAAU,IAAIC,sBAAqB,WAAYZ,GAAc,IAAxBa,EAAuB,KAC9DA,EAAQC,iBACbd,EAASe,UAAUF,EAAQG,QAC3Bb,GAAS,SAAAc,GAAK,OAAIA,EAAQ,WAE3B,KAEHP,EAAAA,EAAAA,YAAU,kBAAMP,EAAS,KAAI,CAACP,KAE9Bc,EAAAA,EAAAA,YAAU,WAAO,IAAD,IACd,KA/B6B,GAgCAR,GAASE,EAAmBc,QACb,KAA1C,UAAApB,EAAaa,eAAb,eAAsBQ,SAASD,SACN,OAAzBpB,EAAaa,SACQ,OAArBX,EAASW,SAKX,OADAX,EAASW,QAAQS,QAAjB,UAAyBtB,EAAaa,eAAtC,aAAyB,EAAsBQ,SAASrB,EAAaa,QAAQQ,SAASD,OAAS,IACxF,kCAAMlB,EAASW,eAAf,aAAM,EAAkBU,gBAC9B,CAACnB,EAAON,IAEJ,CAAEE,aAAAA,EAAcwB,SAAUlB,EAAmBmB,MAAM,EA3C3B,GA2C8BrB,KCvC/D,IAAMsB,GAAe,8IAUfC,GAAe,qJASfC,GAAS,iHA6Bf,EAvBmD,SAAC,GAAiC,IAA/B9B,EAA8B,EAA9BA,iBAAkBC,EAAY,EAAZA,MACtE,EAA0D8B,EAAkB/B,EAAkBC,GAAtFC,EAAR,EAAQA,aAAcwB,EAAtB,EAAsBA,SAEtB,OACE,QAACE,EAAD,MACE,QAACC,EAAD,CAAiBG,IAAK9B,IACpB,QAAC4B,EAAD,cAAkBJ,EAASJ,QAC1BI,EAAS7B,KACR,oBACEc,KACEsB,EAFJ,EAEIA,GACUC,EAHd,EAGIC,OAAUD,KACVtB,EAJJ,EAIIA,YAJJ,OAOE,QAAC,GAAD,UAAcA,EAAd,CAA2Bb,IAAKkC,EAAIxC,KAAMyC","sources":["webpack://min-blog/./src/components/Main/PostItem.tsx","webpack://min-blog/./src/hooks/useInfiniteScroll.tsx","webpack://min-blog/./src/components/Main/PostList.tsx"],"sourcesContent":["import React, { FunctionComponent } from 'react'\r\nimport { Link } from 'gatsby'\r\nimport styled from '@emotion/styled'\r\nimport { GatsbyImage } from 'gatsby-plugin-image'\r\n\r\nimport { PostFrontmatterType } from 'types/PostItem.types'\r\n\r\ntype PostItemProps = PostFrontmatterType & { link: string }\r\n\r\nconst Title = styled.div`\r\n  display: -webkit-box;\r\n  overflow: hidden;\r\n  margin-bottom: 3px;\r\n  text-overflow: ellipsis;\r\n  white-space: normal;\r\n  overflow-wrap: break-word;\r\n  -webkit-line-clamp: 2;\r\n  -webkit-box-orient: vertical;\r\n  font-size: 20px;\r\n  font-weight: 700;\r\n`\r\n\r\nconst PostItemWrapper = styled(Link)`\r\n  display: flex;\r\n  padding: 16px;\r\n  border-top: 1px solid #dddddd;\r\n  cursor: pointer;\r\n\r\n  &:last-of-type {\r\n    margin-bottom: 0;\r\n    border-bottom: 1px solid #dddddd;\r\n  }\r\n  &:hover ${Title} {\r\n    text-decoration: underline;\r\n  }\r\n`\r\n\r\nconst ThumbnailImage = styled(GatsbyImage)`\r\n  width: 180px;\r\n\r\n  @media (max-width: 768px) {\r\n    display: none;\r\n  }\r\n`\r\n\r\nconst PostItemContent = styled.div`\r\n  flex: 1;\r\n  display: flex;\r\n  flex-direction: column;\r\n  padding: 15px;\r\n`\r\n\r\nconst Date = styled.div`\r\n  font-size: 14px;\r\n  font-weight: 400;\r\n  opacity: 0.7;\r\n`\r\n\r\nconst Category = styled.div`\r\n  display: flex;\r\n  flex-wrap: wrap;\r\n  margin-top: 10px;\r\n  margin: 10px -5px;\r\n`\r\n\r\nconst CategoryItem = styled.div`\r\n  margin: 2.5px 5px;\r\n  padding: 3px 5px;\r\n  border-radius: 3px;\r\n  background: black;\r\n  font-size: 14px;\r\n  font-weight: 700;\r\n  color: white;\r\n`\r\n\r\nconst Summary = styled.div`\r\n  display: -webkit-box;\r\n  overflow: hidden;\r\n  margin-top: auto;\r\n  text-overflow: ellipsis;\r\n  white-space: normal;\r\n  overflow-wrap: break-word;\r\n  -webkit-line-clamp: 2;\r\n  -webkit-box-orient: vertical;\r\n  font-size: 16px;\r\n  opacity: 0.8;\r\n`\r\n\r\nconst PostItem: FunctionComponent<PostItemProps> = ({\r\n  title,\r\n  date,\r\n  categories,\r\n  summary,\r\n  thumbnail: {\r\n    childImageSharp: { gatsbyImageData },\r\n  },\r\n  link,\r\n}) => {\r\n  return (\r\n    <PostItemWrapper to={link}>\r\n      <ThumbnailImage image={gatsbyImageData} alt=\"Post Item Image\" />\r\n      <PostItemContent>\r\n        <Title>{title}</Title>\r\n        <Date>{date}</Date>\r\n        <Category>\r\n          {categories.map(category => (\r\n            <CategoryItem key={category}>{category}</CategoryItem>\r\n          ))}\r\n        </Category>\r\n        <Summary>{summary}</Summary>\r\n      </PostItemContent>\r\n    </PostItemWrapper>\r\n  )\r\n}\r\n\r\nexport default PostItem\r\n","import { useState, useMemo, MutableRefObject, useRef, useEffect } from 'react'\r\nimport { PostListItemType } from 'types/PostItem.types'\r\n\r\nexport type useInfiniteScrollType = {\r\n  containerRef: MutableRefObject<HTMLDivElement | null>\r\n  postList: PostListItemType[]\r\n}\r\n\r\nconst NUMBER_OF_ITEMS_PER_PAGE = 10\r\n\r\nconst useInfiniteScroll = (selectedCategory: string, posts: PostListItemType[]): useInfiniteScrollType => {\r\n  const containerRef: MutableRefObject<HTMLDivElement | null> = useRef<HTMLDivElement>(null)\r\n  const observer: MutableRefObject<IntersectionObserver | null> = useRef<IntersectionObserver>(null)\r\n\r\n  const [count, setCount] = useState<number>(1)\r\n\r\n  const postListByCategory = useMemo<PostListItemType[]>(\r\n    () =>\r\n      posts.filter(\r\n        ({\r\n          node: {\r\n            frontmatter: { categories },\r\n          },\r\n        }) => (selectedCategory !== 'All' ? categories.includes(selectedCategory) : true),\r\n      ),\r\n    [selectedCategory],\r\n  )\r\n\r\n  useEffect(() => {\r\n    observer.current = new IntersectionObserver(([entries], observer) => {\r\n      if (!entries.isIntersecting) return\r\n      observer.unobserve(entries.target)\r\n      setCount(value => value + 1)\r\n    })\r\n  }, [])\r\n\r\n  useEffect(() => setCount(1), [selectedCategory])\r\n\r\n  useEffect(() => {\r\n    if (\r\n      NUMBER_OF_ITEMS_PER_PAGE * count >= postListByCategory.length ||\r\n      containerRef.current?.children.length === 0 ||\r\n      containerRef.current === null ||\r\n      observer.current === null\r\n    )\r\n      return\r\n\r\n    observer.current.observe(containerRef.current?.children[containerRef.current.children.length - 1])\r\n    return () => observer.current?.disconnect()\r\n  }, [count, selectedCategory])\r\n\r\n  return { containerRef, postList: postListByCategory.slice(0, count * NUMBER_OF_ITEMS_PER_PAGE) }\r\n}\r\n\r\nexport default useInfiniteScroll\r\n","import React, { FunctionComponent } from 'react'\r\nimport styled from '@emotion/styled'\r\nimport PostItem from 'components/Main/PostItem'\r\nimport useInfiniteScroll, { useInfiniteScrollType } from 'hooks/useInfiniteScroll'\r\n\r\nimport { PostListItemType } from 'types/PostItem.types'\r\n\r\ntype PostListProps = {\r\n  selectedCategory: string\r\n  posts: PostListItemType[]\r\n}\r\n\r\nconst PostListWrapper = styled.div`\r\n  width: 768px;\r\n  margin: 0 auto;\r\n\r\n  @media (max-width: 768px) {\r\n    width: 100%;\r\n    padding: 0 20px;\r\n  }\r\n`\r\n\r\nconst PostListContent = styled.div`\r\n  padding: 20px 0;\r\n  margin-bottom: 60px;\r\n\r\n  @media (max-width: 768px) {\r\n    grid-template-columns: 1fr;\r\n  }\r\n`\r\n\r\nconst PostCount = styled.div`\r\n  font-size: 32px;\r\n  font-weight: 600;\r\n  margin: 0 0 16px 12px;\r\n`\r\n\r\nconst PostList: FunctionComponent<PostListProps> = ({ selectedCategory, posts }) => {\r\n  const { containerRef, postList }: useInfiniteScrollType = useInfiniteScroll(selectedCategory, posts)\r\n\r\n  return (\r\n    <PostListWrapper>\r\n      <PostListContent ref={containerRef}>\r\n        <PostCount>Posts {postList.length}</PostCount>\r\n        {postList.map(\r\n          ({\r\n            node: {\r\n              id,\r\n              fields: { slug },\r\n              frontmatter,\r\n            },\r\n          }) => (\r\n            <PostItem {...frontmatter} key={id} link={slug} />\r\n          ),\r\n        )}\r\n      </PostListContent>\r\n    </PostListWrapper>\r\n  )\r\n}\r\n\r\nexport default PostList\r\n"],"names":["Title","PostItemWrapper","Link","ThumbnailImage","GatsbyImage","PostItemContent","Date","Category","CategoryItem","Summary","title","date","categories","summary","gatsbyImageData","thumbnail","childImageSharp","link","to","image","alt","map","category","key","selectedCategory","posts","containerRef","useRef","observer","useState","count","setCount","postListByCategory","useMemo","filter","node","frontmatter","includes","useEffect","current","IntersectionObserver","entries","isIntersecting","unobserve","target","value","length","children","observe","disconnect","postList","slice","PostListWrapper","PostListContent","PostCount","useInfiniteScroll","ref","id","slug","fields"],"sourceRoot":""}