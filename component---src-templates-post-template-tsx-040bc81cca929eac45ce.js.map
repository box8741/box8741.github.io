{"version":3,"file":"component---src-templates-post-template-tsx-040bc81cca929eac45ce.js","mappings":"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","sources":["webpack://min-blog/./src/components/Post/PostHeadInfo.tsx","webpack://min-blog/./src/components/Post/PostHead.tsx","webpack://min-blog/./src/components/Post/Markdown.tsx","webpack://min-blog/./src/hooks/useActiveHash.tsx","webpack://min-blog/./src/components/Post/TableOfContents.tsx","webpack://min-blog/./src/components/Post/PostContent.tsx","webpack://min-blog/./src/components/Post/ProfileWidget.tsx","webpack://min-blog/./src/components/Post/CommonWidget.tsx","webpack://min-blog/./src/components/Post/AnotherPage.tsx","webpack://min-blog/./src/templates/post_template.tsx"],"sourcesContent":["import React, { FunctionComponent } from 'react'\nimport styled from '@emotion/styled'\n\nexport type PostHeadInfoProps = {\n  title: string\n  date: string\n  categories: string[]\n}\n\nconst PostHeadInfoWrapper = styled.div`\n  display: flex;\n  flex-direction: column;\n  width: 768px;\n  height: 100%;\n  margin: 0 auto;\n  padding: 60px 0;\n\n  @media (max-width: 768px) {\n    width: 100%;\n    padding: 40px 20px;\n  }\n`\n\nconst Title = styled.div`\n  display: -webkit-box;\n  text-align: center;\n  word-break: keep-all;\n  overflow: hidden;\n  overflow-wrap: break-word;\n  margin-top: auto;\n  text-overflow: ellipsis;\n  white-space: normal;\n  -webkit-line-clamp: 2;\n  -webkit-box-orient: vertical;\n  font-size: 40px;\n  font-weight: 800;\n\n  @media (max-width: 768px) {\n    font-size: 30px;\n  }\n`\n\nconst HorizonLine = styled.div`\n  height: 1px;\n  background: var(--border);\n  width: 100px;\n  margin: 20px auto;\n`\n\nconst PostData = styled.div`\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  align-items: center;\n\n  @media (max-width: 768px) {\n    font-size: 15px;\n    font-weight: 400px;\n  }\n`\n\nconst Category = styled.div`\n  font-size: 18px;\n  font-weight: bold;\n`\n\nconst Date = styled.div`\n  font-size: 16px;\n  color: var(--font-gray);\n`\n\nconst PostHeadInfo: FunctionComponent<PostHeadInfoProps> = ({ title, date, categories }) => {\n  return (\n    <PostHeadInfoWrapper>\n      <Title>{title}</Title>\n      <HorizonLine />\n      <PostData>\n        <Category>{categories.join(' / ')}</Category>\n        <Date>{date}</Date>\n      </PostData>\n    </PostHeadInfoWrapper>\n  )\n}\n\nexport default PostHeadInfo\n","import React, { FunctionComponent } from 'react'\nimport styled from '@emotion/styled'\nimport { GatsbyImage, IGatsbyImageData } from 'gatsby-plugin-image'\nimport PostHeadInfo, { PostHeadInfoProps } from 'components/Post/PostHeadInfo'\n\ntype PostHeadProps = PostHeadInfoProps & {\n  thumbnail: IGatsbyImageData\n}\n\nconst PostHeadWrapper = styled.div`\n  width: 768px;\n  margin: 0px auto;\n\n  @media (max-width: 768px) {\n    width: 100%;\n    margin-bottom: 40px;\n  }\n`\n\nconst BackgroundImage = styled(GatsbyImage)`\n  width: 100%;\n  height: 400px;\n  object-fit: cover;\n  background: #333333;\n  box-shadow: var(--shadow-default);\n\n  @media (max-width: 768px) {\n    height: 300px;\n  }\n`\n\nconst PostHead: FunctionComponent<PostHeadProps> = ({ thumbnail, title, date, categories }) => {\n  return (\n    <PostHeadWrapper>\n      <PostHeadInfo title={title} date={date} categories={categories} />\n      <BackgroundImage image={thumbnail} alt=\"thumbnail\" />\n    </PostHeadWrapper>\n  )\n}\n\nexport default PostHead\n","import React, { FunctionComponent } from 'react'\nimport styled from '@emotion/styled'\n\ntype MarkdownProps = {\n  html: string\n}\n\nconst MarkdownRenderer = styled.div`\n  display: flex;\n  flex-direction: column;\n  line-height: 1.8;\n  font-size: 16px;\n  word-break: keep-all;\n\n  h1 {\n    font-size: 30px;\n    font-weight: bold;\n    margin-bottom: 40px;\n  }\n  h2 {\n    font-size: 25px;\n    font-weight: bold;\n    margin-bottom: 30px;\n  }\n  h3 {\n    font-size: 20px;\n    font-weight: bold;\n    margin-bottom: 20px;\n  }\n\n  * + h1 {\n    margin-top: 100px;\n  }\n  * + h2 {\n    margin-top: 80px;\n  }\n  * + h3 {\n    margin-top: 60px;\n  }\n\n  p {\n    padding: 3px 0;\n  }\n\n  blockquote {\n    margin: 30px 0;\n    padding: 5px 15px;\n    border-left: 2px solid var(--border);\n    font-weight: 800;\n  }\n\n  ol,\n  ul {\n    margin-left: 20px;\n    padding: 30px 0;\n  }\n\n  hr {\n    border: 1px solid var(--border);\n    margin: 100px 0;\n  }\n\n  a {\n    color: #4263eb;\n    text-decoration: underline;\n  }\n\n  img {\n  }\n  p > span[class='gatsby-resp-image-wrapper'] {\n    margin: 30px 0;\n    box-shadow: var(--shadow-default);\n  }\n\n  pre[class*='language-'] {\n    margin: 30px 0;\n    padding: 15px;\n    font-size: 15px;\n    border-radius: 6px;\n    box-shadow: var(--shadow-default);\n\n    ::-webkit-scrollbar-thumb {\n      background: rgba(255, 255, 255, 0.5);\n      border-radius: 10px;\n      background-clip: padding-box;\n      border: 2px solid transparent;\n    }\n  }\n\n  p:not(pre) > code[class='language-text'],\n  li:not(pre) > code[class='language-text'] {\n    font-size: 14px;\n    background: var(--bg-gray);\n    color: #e91e63;\n    padding: 3px 5px;\n  }\n\n  code[class*='language-'],\n  pre[class*='language-'] {\n    tab-size: 2;\n  }\n\n  @media (max-width: 768px) {\n    line-height: 1.6;\n    font-size: 14px;\n\n    h1 {\n      font-size: 23px;\n    }\n    h2 {\n      font-size: 20px;\n    }\n    h3 {\n      font-size: 17px;\n    }\n  }\n`\n\nconst Markdown: FunctionComponent<MarkdownProps> = ({ html }) => {\n  return <MarkdownRenderer dangerouslySetInnerHTML={{ __html: html }} />\n}\n\nexport default Markdown\n","import { MutableRefObject, useEffect, useRef, useState } from 'react'\n\nconst useActiveHash = (itemIds: string[]) => {\n  const observer: MutableRefObject<IntersectionObserver | null> = useRef(null)\n  const [activeId, setActiveId] = useState<string>('')\n  const tempRef: MutableRefObject<Element | null> = useRef(null)\n\n  useEffect(() => {\n    observer.current = new IntersectionObserver(\n      entries => {\n        entries.forEach(entry => {\n          if (entry.isIntersecting) {\n            setActiveId(entry.target.id)\n          }\n        })\n      },\n      { rootMargin: `0% 0% -90% 0%` },\n    )\n\n    if (observer.current === null) return\n\n    itemIds.forEach(id => {\n      tempRef.current = document.getElementById(id)\n      if (tempRef.current) observer.current?.observe(tempRef.current)\n    })\n\n    return () => {\n      itemIds.forEach(id => {\n        tempRef.current = document.getElementById(id)\n        if (tempRef.current) observer.current?.unobserve(tempRef.current)\n      })\n    }\n  }, [])\n\n  return activeId\n}\n\nexport default useActiveHash\n","import React, { FunctionComponent, useMemo } from 'react'\nimport styled from '@emotion/styled'\nimport useActiveHash from 'hooks/useActiveHash'\n\ntype TOCProps = {\n  toc: string\n}\n\nconst TOCWrapper = styled.div`\n  position: relative;\n  width: 250px;\n  margin-left: 60px;\n\n  @media (max-width: 1410px) {\n    display: none;\n  }\n`\n\nconst TOCContent = styled.div<{ activeId: string }>`\n  position: sticky;\n  top: 200px;\n  border-left: 3px solid var(--border);\n  padding: 12px;\n\n  li {\n    list-style: none;\n  }\n\n  p + ul {\n    margin-left: 10px;\n  }\n\n  a {\n    color: var(--font-gray);\n    font-size: 14px;\n    transition: color 0.2s ease, font-size 0.2s ease;\n  }\n\n  a[href$='#${({ activeId }) => activeId}'] {\n    color: var(--font);\n    font-size: 15px;\n    font-weight: 600;\n  }\n`\n\nconst TableOfContents: FunctionComponent<TOCProps> = ({ toc }) => {\n  const targetedIds = useMemo(() => {\n    if (typeof document === 'undefined') return []\n    const dummyDOM = document.createElement('html')\n    dummyDOM.innerHTML = toc\n    const justAnchors = dummyDOM.querySelectorAll(`a`)\n\n    const val: string[] = []\n    justAnchors.forEach(a => {\n      val.push(decodeURI(a.hash.replace('#', '')))\n    })\n\n    return val\n  }, [])\n\n  const activeId = useActiveHash(targetedIds)\n\n  return (\n    <TOCWrapper>\n      <TOCContent activeId={encodeURI(activeId)} dangerouslySetInnerHTML={{ __html: toc }} />\n    </TOCWrapper>\n  )\n}\n\nexport default TableOfContents\n","import React, { FunctionComponent } from 'react'\nimport styled from '@emotion/styled'\nimport Markdown from 'components/Post/Markdown'\nimport TableOfContents from 'components/Post/TableOfContents'\n\ninterface PostContentProps {\n  html: string\n  tableOfContents: string\n}\n\nconst PostWrapper = styled.div`\n  width: 768px;\n  margin: 0 auto;\n\n  @media (max-width: 768px) {\n    width: 100%;\n    padding: 0px 20px;\n    overflow: auto;\n  }\n`\n\nconst PostContentWrapper = styled.div`\n  display: grid;\n  grid-template-columns: 768px 250px;\n  margin: 80px 0;\n\n  @media (max-width: 768px) {\n    display: block;\n    margin: 40px 0;\n  }\n`\n\nconst PostContent: FunctionComponent<PostContentProps> = ({ html, tableOfContents: toc }) => {\n  return (\n    <PostWrapper>\n      <PostContentWrapper>\n        <Markdown html={html} />\n        <TableOfContents toc={toc} />\n      </PostContentWrapper>\n    </PostWrapper>\n  )\n}\n\nexport default PostContent\n","import React, { FunctionComponent } from 'react'\nimport { GatsbyImage, IGatsbyImageData } from 'gatsby-plugin-image'\nimport styled from '@emotion/styled'\n\ntype ProfileWidgetProps = {\n  profileImage: IGatsbyImageData\n}\n\nconst ProfileWidgetWrapper = styled.div`\n  display: flex;\n  width: 768px;\n  margin: 0 auto 20px auto;\n\n  @media (max-width: 768px) {\n    width: 100%;\n    flex-direction: column;\n    padding: 0 20px;\n  }\n`\n\nconst Profile = styled(GatsbyImage)`\n  width: 140px;\n  height: 140px;\n`\n\nconst Line = styled.span`\n  height: 90px;\n  width: 1px;\n  background: #cccccc;\n  margin: 0 24px 0 12px;\n\n  @media (max-width: 768px) {\n    display: none;\n  }\n`\n\nconst IntroduceWRapper = styled.div`\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n`\n\nconst IntroduceTitle = styled.div`\n  font-size: 20px;\n  font-weight: bold;\n  margin-bottom: 12px;\n`\n\nconst IntroduceDescription = styled.div`\n  font-size: 16px;\n`\n\nconst IntroduceDevelop = styled.div`\n  font-size: 14px;\n  color: var(--font-gray);\n`\n\nconst ProfileWidget: FunctionComponent<ProfileWidgetProps> = ({ profileImage }) => {\n  return (\n    <ProfileWidgetWrapper>\n      <Profile image={profileImage} alt=\"Profile image\" />\n      <Line />\n      <IntroduceWRapper>\n        <IntroduceTitle>안녕하세요 개발자 Min 입니다.</IntroduceTitle>\n        <IntroduceDescription>개발자들 사이에서 한 번쯤 들어봤을 만한 사람이 되는 게 목표입니다.</IntroduceDescription>\n        <IntroduceDevelop>Frontend Developer</IntroduceDevelop>\n      </IntroduceWRapper>\n    </ProfileWidgetWrapper>\n  )\n}\n\nexport default ProfileWidget\n","import React, { createRef, FunctionComponent, useEffect } from 'react'\nimport styled from '@emotion/styled'\n\nconst src = 'https://utteranc.es'\nconst repo = 'box8741/box8741.github.io'\nconst utterancesSelector = 'iframe.utterances-frame'\n\ntype UtterancesAttributesType = {\n  src: string\n  repo: string\n  'issue-term': string\n  label: string\n  theme: string\n  crossorigin: string\n  async: string\n}\n\nconst UtteranceWrapper = styled.div`\n  @media (max-width: 768px) {\n    padding: 0 20px;\n  }\n`\n\nconst CommentWidget: FunctionComponent = () => {\n  const containerRef = createRef<HTMLDivElement>()\n\n  useEffect(() => {\n    if (containerRef.current === null) return\n\n    const prefersColorScheme = window.matchMedia('prefers-color-scheme: dark').matches ? 'dark' : 'light'\n    const theme = localStorage.getItem('theme') || prefersColorScheme\n\n    const utterances: HTMLScriptElement = document.createElement('script')\n\n    const attributes: UtterancesAttributesType = {\n      src: `${src}/client.js`,\n      repo,\n      'issue-term': 'title',\n      label: 'Comment',\n      theme: `github-${theme}`,\n      crossorigin: 'anonymous',\n      async: 'true',\n    }\n\n    Object.entries(attributes).forEach(([key, value]) => {\n      utterances.setAttribute(key, value)\n    })\n    containerRef.current.appendChild(utterances)\n\n    const changeUtterances = (theme: string) => {\n      const utterances = document.querySelector<HTMLIFrameElement>(utterancesSelector)\n      if (utterances === null || utterances.contentWindow === null) return\n      utterances.contentWindow.postMessage(\n        {\n          type: 'set-theme',\n          theme: `github-${theme}`,\n        },\n        src,\n      )\n    }\n\n    const observer = new MutationObserver(([mutation]) => {\n      const { className } = mutation.target as Element\n      changeUtterances(className)\n    })\n\n    observer.observe(window.document.body, {\n      childList: false,\n      subtree: false,\n      attributes: true,\n      attributeFilter: ['class'],\n      characterData: false,\n      attributeOldValue: false,\n      characterDataOldValue: false,\n    })\n\n    return () => observer.disconnect()\n  }, [])\n\n  return <UtteranceWrapper ref={containerRef} />\n}\n\nexport default CommentWidget\n","import React, { FunctionComponent } from 'react'\nimport styled from '@emotion/styled'\nimport { Link } from 'gatsby'\n\ntype AnotherPageProps = {\n  pageContext: {\n    prev: PageContextItemType\n    next: PageContextItemType\n  }\n}\n\nexport type PageContextItemType = {\n  fields: { slug: string }\n  frontmatter: { title: string }\n}\n\nconst AnotherPageWrapper = styled.div`\n  display: grid;\n  grid-template-columns: repeat(2, 1fr);\n  grid-column-gap: 40px;\n  width: 768px;\n  margin: 0 auto 36px auto;\n\n  @media (max-width: 768px) {\n    width: 100%;\n    grid-template-columns: 1fr;\n    padding: 0 20px;\n    grid-column-gap: 0;\n  }\n`\n\nconst PostItemWrapper = styled(Link)`\n  border: 1px solid var(--border);\n  border-radius: 6px;\n  padding: 8px;\n  cursor: pointer;\n  transition: box-shadow 0.2s ease;\n\n  &:hover {\n    box-shadow: var(--shadow-default);\n  }\n\n  @media (max-width: 768px) {\n    margin-bottom: 12px;\n    &:last-of-type {\n      margin-bottom: 0;\n    }\n  }\n`\n\nconst PostText = styled.div`\n  font-size: 12px;\n`\n\nconst PostTitle = styled.div`\n  display: -webkit-box;\n  font-size: 14px;\n  font-weight: bold;\n  overflow: hidden;\n  -webkit-line-clamp: 1;\n  -webkit-box-orient: vertical;\n`\n\nconst AnotherPage: FunctionComponent<AnotherPageProps> = ({ pageContext: { prev, next } }) => {\n  return (\n    <AnotherPageWrapper>\n      {prev ? (\n        <PostItemWrapper to={prev.fields.slug}>\n          <PostText>이전 포스트</PostText>\n          <PostTitle>{prev.frontmatter.title}</PostTitle>\n        </PostItemWrapper>\n      ) : (\n        <div />\n      )}\n      {next ? (\n        <PostItemWrapper to={next.fields.slug}>\n          <PostText>다음 포스트</PostText>\n          <PostTitle>{next.frontmatter.title}</PostTitle>\n        </PostItemWrapper>\n      ) : (\n        <div />\n      )}\n    </AnotherPageWrapper>\n  )\n}\n\nexport default AnotherPage\n","import React, { FunctionComponent } from 'react'\nimport { graphql, PageProps } from 'gatsby'\nimport { IGatsbyImageData } from 'gatsby-plugin-image'\nimport Layout from 'components/Common/Layout'\nimport PageTemplate from 'components/Common/PageTemplate'\nimport PostHead from 'components/Post/PostHead'\nimport PostContent from 'components/Post/PostContent'\nimport ProfileWidget from 'components/Post/ProfileWidget'\nimport CommentWidget from 'components/Post/CommonWidget'\nimport AnotherPage, { PageContextItemType } from 'components/Post/AnotherPage'\n\nimport { PostFrontmatterType } from 'types/PostItem.types'\n\nexport type PostPageItemType = {\n  node: {\n    html: string\n    tableOfContents: string\n    frontmatter: PostFrontmatterType\n  }\n}\n\ntype PostTemplateProps = {\n  data: {\n    allMarkdownRemark: {\n      edges: PostPageItemType[]\n    }\n    file: {\n      childImageSharp: { profileImage: IGatsbyImageData }\n    }\n  }\n  location: PageProps['location']\n  pageContext: {\n    prev: PageContextItemType\n    next: PageContextItemType\n  }\n}\n\nconst PostTemplate: FunctionComponent<PostTemplateProps> = ({\n  data: {\n    allMarkdownRemark: { edges },\n    file: {\n      childImageSharp: { profileImage },\n    },\n  },\n  pageContext,\n  location: { href },\n}) => {\n  const {\n    node: {\n      html,\n      tableOfContents,\n      frontmatter: {\n        title,\n        summary,\n        date,\n        categories,\n        thumbnail: {\n          childImageSharp: { gatsbyImageData },\n          publicURL,\n        },\n      },\n    },\n  } = edges[0]\n\n  return (\n    <Layout title={title} description={summary} url={href} image={publicURL}>\n      <PageTemplate>\n        <PostHead title={title} date={date} categories={categories} thumbnail={gatsbyImageData} />\n        <PostContent html={html} tableOfContents={tableOfContents} />\n        <ProfileWidget profileImage={profileImage} />\n        <AnotherPage pageContext={pageContext} />\n        <CommentWidget />\n      </PageTemplate>\n    </Layout>\n  )\n}\n\nexport default PostTemplate\n\nexport const queryMarkdownDataBySlug = graphql`\n  query queryMarkdownDataBySlug($slug: String) {\n    allMarkdownRemark(filter: { fields: { slug: { eq: $slug } } }) {\n      edges {\n        node {\n          html\n          tableOfContents\n          frontmatter {\n            title\n            summary\n            date(formatString: \"YYYY.MM.DD\")\n            categories\n            thumbnail {\n              childImageSharp {\n                gatsbyImageData\n              }\n              publicURL\n            }\n          }\n        }\n      }\n    }\n    file(name: { eq: \"profile-image\" }) {\n      childImageSharp {\n        profileImage: gatsbyImageData(width: 140, height: 140)\n      }\n    }\n  }\n`\n"],"names":["PostHeadInfoWrapper","Title","HorizonLine","PostData","Category","Date","title","date","categories","join","PostHeadWrapper","BackgroundImage","GatsbyImage","thumbnail","image","alt","MarkdownRenderer","html","dangerouslySetInnerHTML","__html","itemIds","observer","useRef","useState","activeId","setActiveId","tempRef","useEffect","current","IntersectionObserver","entries","forEach","entry","isIntersecting","target","id","rootMargin","document","getElementById","observe","unobserve","TOCWrapper","TOCContent","toc","targetedIds","useMemo","dummyDOM","createElement","innerHTML","justAnchors","querySelectorAll","val","a","push","decodeURI","hash","replace","useActiveHash","encodeURI","PostWrapper","PostContentWrapper","tableOfContents","ProfileWidgetWrapper","Profile","Line","IntroduceWRapper","IntroduceTitle","IntroduceDescription","IntroduceDevelop","profileImage","src","UtteranceWrapper","containerRef","createRef","prefersColorScheme","window","matchMedia","matches","theme","localStorage","getItem","utterances","attributes","repo","label","crossorigin","async","Object","key","value","setAttribute","appendChild","MutationObserver","querySelector","contentWindow","postMessage","type","changeUtterances","className","body","childList","subtree","attributeFilter","characterData","attributeOldValue","characterDataOldValue","disconnect","ref","AnotherPageWrapper","PostItemWrapper","Link","PostText","PostTitle","pageContext","prev","next","to","fields","slug","frontmatter","data","edges","allMarkdownRemark","file","childImageSharp","href","location","node","summary","gatsbyImageData","publicURL","Layout","description","url","PageTemplate"],"sourceRoot":""}